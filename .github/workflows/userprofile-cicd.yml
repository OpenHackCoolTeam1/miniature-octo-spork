name: user profile CICD

on:
 push:
  branches: 
   - main
  paths: 
   - 'apis/userprofile/**'
   
jobs:
  build:

   runs-on: ubuntu-latest
   steps:
      - uses: actions/checkout@v2
      
      - name: Use Node.js
        uses: actions/setup-node@v1
        with:
          node-version: '12.x'
          
      - name: Install dependencies
        run: npm install --prefix ./apis/userprofile/        
        
      - name: Start the Server
        run: npm start --prefix ./apis/userprofile/ &
        
      - name: Sleep for 10s
        uses: juliangruber/sleep-action@v1
        with:
         time: 10s
            
      - name: Run Unit Test
        id: UnitTest
        working-directory: ./apis/userprofile/
        run: npm test
        continue-on-error: true
            
      - name: Create an Issue if the job fails    
        if: ${{ steps.UnitTest.outcome != 'success' }}
        uses: JasonEtco/create-an-issue@v2
        env:
         GITHUB_TOKEN: ${{ secrets.ADNAN_TOKEN}}
       
      - name: Exit On Failed Unit Test
        if: ${{ steps.UnitTest.outcome != 'success' }}
        run: exit 1

      - name: Start Staging slot so we can deploy on it
        uses: azure/CLI@v1
        with:
          azcliversion: 2.30.0
          inlineScript: |                
            az webapp start --name openhacktdp1i383userprofile --resource-group openhacktdp1i383rg --slot staging   

      - name: Setup Docker and ACR environment
        uses: azure/docker-login@v1
        with:
          login-server: openhacktdp1i383acr.azurecr.io
          username: ${{ secrets.REGISTRY_USERNAME }}
          password: ${{ secrets.REGISTRY_PASSWORD }}

      - name: Build and Push Docker Image
        run: |
          docker build ./apis/userprofile -t openhacktdp1i383acr.azurecr.io/devopsoh/api-userprofile:${{ github.sha }}
          docker push openhacktdp1i383acr.azurecr.io/devopsoh/api-userprofile:${{ github.sha }}     
    
      - name: Deploy to App Service using the ACR image
        uses: azure/webapps-deploy@v2
        with:
          app-name: 'openhacktdp1i383userprofile'
          publish-profile: ${{ secrets.AZURE_USERPROFILEAPP_PUBLISH_PROFILE }}
          images: 'openhacktdp1i383acr.azurecr.io/devopsoh/api-userprofile:${{ github.sha }}'
          slot-name: staging

      - name: Check if the staging slot is healthy using curl      
        run: |         
         code=true
         for i in {1..10}       
            do
              response=$(curl -m 5 -s -w "%{http_code}" "https://openhacktdp1i383userprofile-staging.azurewebsites.net/api/healthcheck/poi")
              http_code=$(tail -n1 <<< "$response") 
              echo "Status:" "$http_code" 
               if [ "$http_code" == "}200" ] 
               then
                break
               else
                 code=false
               fi
               sleep 30
            done
         echo "$code"
         if [ "$code" == false ] 
         then
          exit 1
         fi      
      - name: Perform a slot swap and STOP the Staging Slot for optimisation
        uses: azure/CLI@v1
        with:
          azcliversion: 2.30.0
          inlineScript: |          
            az webapp deployment slot swap  -g openhacktdp1i383rg -n openhacktdp1i383userprofile --slot staging \--target-slot production
            az webapp stop --name openhacktdp1i383userprofile --resource-group openhacktdp1i383rg --slot staging

