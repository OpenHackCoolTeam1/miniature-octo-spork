name: Suhas - CD to staging

on: 
 push:
  branches: 
   - 'suhas/**'
 #pull_request:
 # paths:
 #  - 'apis/poi/**'


jobs:
  build:

    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v2
    
    - name: Log in with Azure
      uses: azure/login@v1
      with:
        creds: '${{ secrets.AZURE_CREDENTIALS }}'
    
    - name: Setup Docker and ACR environment
      uses: azure/docker-login@v1
      with:
        login-server: openhacktdp1i383acr.azurecr.io
        username: ${{ secrets.REGISTRY_USERNAME }}
        password: ${{ secrets.REGISTRY_PASSWORD }}  
     
    - name: Build and Push Docker Image
      run: |
        docker build ./apis/poi/web -t openhacktdp1i383acr.azurecr.io/devopsoh/api-poi:${{ github.sha }}
        docker push openhacktdp1i383acr.azurecr.io/devopsoh/api-poi:${{ github.sha }}     
    - name: Deploy to App Service using the ACR image
      uses: azure/webapps-deploy@v2
      with:
        app-name: 'openhacktdp1i383poi'
        publish-profile: ${{ secrets.AZURE_POIAPP_PUBLISH_PROFILE_STAGING }}
        images: 'openhacktdp1i383acr.azurecr.io/devopsoh/api-poi:${{ github.sha }}'
        slot-name: staging

    - name: Check if the staging slot is healthy using cURL
      run: |         
       declare -i duration=1
       declare hasUrl=""
       declare endpoint

       usage() {
           cat <<END
           polling.sh [-i] [-h] endpoint

           Report the health status of the endpoint
           -i: include Uri for the format
           -h: help
       END
       }

       while getopts "ih" opt; do 
         case $opt in 
           i)
             hasUrl=true
             ;;
           h) 
             usage
             exit 0
             ;;
           \?)
            echo "Unknown option: -${OPTARG}" >&2
            exit 1
            ;;
         esac
       done

       shift $((OPTIND -1))

       if [[ $1 ]]; then
         endpoint=$1
       else
         echo "Please specify the endpoint."
         usage
         exit 1 
       fi 


       healthcheck() {
           declare url=$1
           result=$(curl --http2 -i $url 2>/dev/null | grep "HTTP/[12][12\.]*")
           echo $result
       }

       while [[ true ]]; do
          result=`healthcheck $endpoint` 
          declare status
          if [[ -z $result ]]; then 
             status="N/A"
          else
             status=${result:7:3}
          fi 
          timestamp=$(date "+%Y%m%d-%H%M%S")
          if [[ -z $hasUrl ]]; then
            echo "$timestamp | $status "
          else
            echo "$timestamp | $status | $endpoint " 
          fi 
          sleep $duration
       done
       
    - name: Run Polling.sh
      run: |
         val = $(polling -i "http://openhacktdp1i383poi-staging.azurewebsites.net/api/healthcheck/poi")
         echo $val
      
    
    - name: Performing Slot Swap
      uses: azure/CLI@v1
      with:
        azcliversion: 2.30.0
        inlineScript: |
          az account show
          az webapp deployment slot swap  -g openhacktdp1i383rg -n openhacktdp1i383poi --slot staging \--target-slot production
   

